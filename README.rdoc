# yattr_encrypted

This is based on code stolen from *yattr_encrypted* and *encryptor* - both by
github.com/shuber - and both very fine gems.

So why another dumb attribute encryptor gem?

shuber's gems don't do what I want and they appear to be dormant.

The primary difference between **shuber**'s gems and this one is a matter of
flexibility and simplicity. **yattr_encrypted** is simple, easy to use and
(should be) pretty secure. This comes at the expense of *flexibility*.

In **yattr_encrypted** you do not have a choice of algorithm, encoding, additional
encrypt/decrypt methods, conditional encryption, or underlying data mapper.
You also have to use Rails 3.1+.

Inmore detail, here is where they differ:

**yattr_encrypted** does not support:

* DataMapper - is not supported
* Sequel - is not supported
* ActiveRecord - find_by*** methods
* alternate encryption methods
* String#encrypt, #encrypt!, #decrypt, and #decrypt!
* most of the options **yattr_encrypted** supports
* conditional encrypting - **yattr_encrypted** supports conditionally encrypting
fields based on some logic. I don't have a use case for this, so **yattr_encrypted**
does not support it.

**yattr_encrypted** is also self contained - only relies on the *openssl* gem, whereas
the *shuber* gem depends on *encryptor*.

**yattr_encrypted** *does* support:

* **yattr_encrypted** ONLY works with ActiveRecord
* random initial values for each encrypted attribute. This is done by creating a
random *iv* and including it in the encrypted data. This is supposed to be OK
in that *iv* values don't need the same security as keys.
* detects when fields are modified by actions other than assignment. This supports
encrypting complex types - such as hashes and arrays. This is implemented by adding
*save* and *save!* methods to models
* Rails 3.1 & Rails 3.2 - don't pretend to support anything lower (but it might work)


## Installation

Either

  gem install yattr_encrypted

Or add `gem yattr_encrypted` to your Gemfile

## Usage

### Basic

For each attribute you want to encrypt:

assuming that you want to encrypt a field named `foo`, then create
a field in your *migration* named `foo_encrypted`. Then add the `yattr_encrypted`
macro to the model.

    class Foo < ActiveRecord::Base
      yattr_encrypted :foo
    end

This will add accessor methods `foo` and `foo=` to your model. You do not use the
actual `foo_encrypted` field directly.

NOTE: `foo` is not useable for search. If you want to search on encrypted fields,
use **yattr_encrypted**. **yattr_encrypted** does not create searchable fields because
it automatically generates random initial values so it is not possible to generate
matching encrypted values without retrieving the encrypted data.

### Options

The encrypted field name defaults to `<field>_encrypted`. You can change this on
a field by field basis using the `:prefix` and `:suffix`  - which define strings
which are prefixed and suffixed to the field name to create the encrypted field name.
They default to:

    :prefix = ''
    :suffix = '_encrypted'

Notice that the underscore ('_') must be included in `:prefix` and `:suffix`, if you
want them.

### Encryption keys

The default encryption key is the value of `<application>::Application.config.secret_token`
which is in `config/initializers/secret_token.rb`.

If you want, you can specify the key on a field by field basis using the `:key` option.

NOTE: all encryption uses `ase-256-cbc` with random initial values. For some reason this
triggers a key length check in **openssl** which raises an exception if your key is
too short. I don't know what the required key length is, but `secrete_token` is long enough
and 'this is a very long secret key' is not.

If you supply your own key, it can be a Proc.

### Initial Values

As stated everywhere - random initial values are automatically generated for all fields.
They are prepended to the actual encrypted data and stripped during decryption. You can't
override this, nor can you provide your own initial values.

### Encryption Method

**yattr_encrypted** only uses `aes-256-cbc`. If you want variety, use **yattr_encrypted**, which
supports the entire gamete supplied by **openssl**

### Encoding & etc

The encoding algorithm for a field is:

    field_jsonified = ActiveSupprt::JSON.encode field
    iv = lambda { (0..16).map { |x| rand(256).chr }.join() }.call
    encrypted_data = YattrEncrypted.encrypt field_jsonified, iv
    field_encrypted = ActiveSupport::Base64.encode64 ("%04d" % iv.length) + iv + encrypted_data
    
The decoding algorithm is:

    field_decoded = ActiveSupport::Base64::decode64 field_encrypted
    len = field_decoded[0..3].to_i + 1
    iv = field_decoded[4..(len)]
    encrypted_data = field_decoded[(len+1)..-1]
    field_jsonified = YattrEncrypted.decrypt encrypted_data, iv
    field = ActiveSupprt::JSON.decode field_jsonified

#### Dynamic find_by_ and scoped_by_ methods

Not supported. You cannot find_by... nor can you scope by encrypted fields.
