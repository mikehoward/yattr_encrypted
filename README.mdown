# YattrEncrypted #

Version: 0.1.4  (but you should check lib/yattr_encrypted/version.rb to be sure)

## Applicability ##

This code has been tested

* using ruby 1.9.2-p290
* stand alone
* Rails 3.1.4

## Description ##

This is based on code stolen from *yattr_encrypted* and *encryptor* - both by
github.com/shuber - and both very fine gems.

So why another dumb attribute encryptor gem?

shuber's gems don't do what I want and they appear to be dormant.

The primary difference between **shuber**'s gems and this one is a matter of
flexibility and simplicity. **yattr_encrypted** is simple, easy to use and
(should be) pretty secure. This comes at the expense of *flexibility*.

In **yattr_encrypted** you do not have a choice of algorithm, encoding, additional
encrypt/decrypt methods, conditional encryption, or underlying data mapper.
You also have to use Rails 3.1+.

In more detail, here is where they differ:

**yattr_encrypted** does not support:

* DataMapper
* Sequel
* ActiveRecord find_by*** methods for encrypted fields
* alternate encryption methods
* alternate encryption algorithms
* String#encrypt, #encrypt!, #decrypt, and #decrypt!
* most of the options **yattr_encrypted** supports
* conditional encrypting - **yattr_encrypted** supports conditionally encrypting
fields based on some logic. I don't have a use case for this, so **yattr_encrypted**
does not support it.

**yattr_encrypted** is also self contained - only relies on the *openssl* (part
of the Ruby Standard Library), whereas the *shuber* gem depends on *encryptor*.

What **yattr_encrypted** *does* support:

* **yattr_encrypted** ONLY works with ActiveRecord
* random initial values for each encrypted attribute. This is done by creating a
random *iv* and including it in the encrypted data. See *openssl* documentation
for details [OpenSSL::Cipher]
* detects when fields are modified by actions other than assignment. This supports
encrypting complex types - such as hashes and arrays. This is implemented by adding
a `before_save` calleback to the private method *yattr_update_encrypted_values*
* Rails 3.1 & Rails 3.2 - doesn't pretend to support anything lower (but it might work)


## Installation ##

Either

    gem install yattr_encrypted

Or add to your Gemfile

    gem yattr_encrypted

## Usage ##

Name each field you want to encrypt in the `yattr_encrypted` macro.

For example, assume that you want to encrypt a field named `foo`. Then create
a field in your *migration* named `foo_encrypted`.

    class Foo < ActiveRecord::Base
      yattr_encrypted :foo
    end

This will add accessor methods `foo` and `foo=` to your model. You do not use the
actual `foo_encrypted` field directly.

NOTE: `foo` is not useable for search. If you want to search on encrypted fields,
use **attr\_encrypted**. **yattr\_encrypted** does not create searchable fields because
it automatically generates random initial values so it is not possible to generate
matching encrypted values without retrieving the encrypted data.

### Options ###

**yattr_encrypted** accepts five options:

* :prefix - the prefix which is prepended to *attribute* to form the encrypted attribute
name. Defaults to ''
* :suffix - the suffix which appended to *attribute* to form the encrypted attribute
name. Defaults to '_encrypted'
* :key - allows attribute specific encryption keys. The default - if not specified - is
`Rails.application.config.secret_token`
* :read_filter - a LAMBDA (or Proc) which is called to modify the clear-text value of
the *attribute* prior to returning it.
* :write_filter - a LAMBDA (or Proc) which is called on the assigned value prior to
assigning it to the *attribute*

These options are discussed in some detail below in the applicable section.

### Encrypted Attribute Name ###

The encrypted field name defaults to `<field>_encrypted`. You can change this on
a field by field basis using the `:prefix` and `:suffix`  - which define strings
which are prefixed and suffixed to the field name to create the encrypted field name.
They default to:

    :prefix = ''
    :suffix = '_encrypted'

Notice that the underscore ('_') must be included in `:prefix` and `:suffix`, if you
want them.

### Encryption keys ###

The default encryption key is the value of `<application>::Application.config.secret_token`
which is in `config/initializers/secret_token.rb`.

If you want to use some other key - on a field by field basis,
you can specify the key on a field by field basis using the `:key` option.

NOTE: all encryption uses `ase-256-cbc` with random initial values. For some reason this
triggers a key length check in **openssl** which raises an exception if your key is
too short. I don't know what the required key length is, but `secrete_token` is long enough
and 'this is a very long secret key' is not.

If you supply your own key, it can be a String or a Proc which returns a String.

### Special Attribute Processing ###

Special processing for attribute values can be implemented by using the `:read_filter` and
`:write_filter` options of the `yattr_encrypted` macro.

A `:read_filter` is a proc (or lambda) which accepts a single argument. It is called on the
value of the *attribute* immediately before being returned by the clear text attribute accessor.

A `:write_filter` is a proc (or lambda) which accepts a single argument. It is called
on the value passed to the *attribute* writer prior to any other action in the writer.

### Encription Initial Values ###

As stated everywhere - random initial values are automatically generated for all fields.
They are prepended to the actual encrypted data and stripped during decryption. You can't
override this, nor can you provide your own initial values.

### Encryption Method ###

**yattr\_encrypted** only uses `aes-256-cbc`. If you want variety, use **attr\_encrypted**, which
supports the entire gamete supplied by **openssl**

### Encoding of Encrypted Data and Database Compatibility ###

All data saved in the database is `base64` encode. All fields are further
serialized as JSON objects. This is to avoid dealing with any database idiodicy
and to transparently handle complex data types being used in database fields [such as
Hashes and Arrays].

The encoding code for a field is:

    cipher = OpenSSL::Cipher.new(ALGORITHM)
    cipher.encrypt
    cipher.key = key
    iv = cipher.random_iv   # ask OpenSSL for a new, random initial value
    
    # jsonify data
    value_marshalled = Marshal.dump value

    # encrypt data
    result = cipher.update value_marshalled
    result << cipher.final

    # return encrypted data and iv
    Base64.encode64(("%04d" % iv.length) + iv + result)
        
The decoding code is:

     # initialize decryptor
    cipher = OpenSSL::Cipher.new(ALGORITHM)
    cipher.decrypt
    cipher.key = key
  
    # extract encrypted_value
    encrypted_value = Base64.decode64 marshalled_value

    # extract and set iv
    iv_end = encrypted_value[0..3].to_i + 3
    cipher.iv = encrypted_value[4..(iv_end)]
    encrypted_value = encrypted_value[(iv_end+1)..-1]

    # derypte and return
    result = cipher.update(encrypted_value)
    result << cipher.final
  
    Marshal.load result
